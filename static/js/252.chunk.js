"use strict";(self.webpackChunkverovault=self.webpackChunkverovault||[]).push([[252],{7252:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('{// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  InsightsSection: () => (/* binding */ InsightsSection)\n});\n\n// EXTERNAL MODULE: ./node_modules/.pnpm/@tanstack+react-query@5.89.0_react@18.3.1/node_modules/@tanstack/react-query/build/modern/useQuery.js + 6 modules\nvar useQuery = __webpack_require__(4576);\n// EXTERNAL MODULE: ./node_modules/.pnpm/framer-motion@11.18.2_@emotion+is-prop-valid@1.2.2_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/components/m/proxy.mjs + 11 modules\nvar proxy = __webpack_require__(1894);\n// EXTERNAL MODULE: ./src/design-system/motion/motion-presets.ts\nvar motion_presets = __webpack_require__(9979);\n// EXTERNAL MODULE: ./node_modules/.pnpm/zod@4.1.11/node_modules/zod/v4/classic/external.js + 7 modules\nvar external = __webpack_require__(5077);\n;// ./src/services/api-client.ts\n// Reason: Centralized API client to standardize error handling, parsing, and env-driven base URL.\n// In dev, some setups may not have DefinePlugin substitution yet. Avoid hard process references.\nconst RAW_ENV = typeof process !== \'undefined\' && "MISSING_ENV_VAR" && "string" === \'string\' ? "" : \'\';\nconst API_BASE_URL = String(RAW_ENV).replace(/\\/$/, \'\');\nconst isApiConfigured = API_BASE_URL.length > 0;\nconst parseJson = async res => {\n  const text = await res.text();\n  try {\n    return text ? JSON.parse(text) : {};\n  } catch (e) {\n    throw {\n      status: res.status,\n      message: \'Invalid JSON received from server\',\n      details: text\n    };\n  }\n};\nconst request = async (method, path, options = {}) => {\n  if (!API_BASE_URL) {\n    throw {\n      status: 500,\n      message: \'API_BASE_URL is not configured\'\n    };\n  }\n  const url = `${API_BASE_URL}${path.startsWith(\'/\') ? \'\' : \'/\'}${path}`;\n  const headers = {\n    \'Content-Type\': \'application/json\',\n    ...(options.headers || {})\n  };\n  const res = await fetch(url, {\n    ...options,\n    method,\n    headers,\n    body: options.body !== undefined ? JSON.stringify(options.body) : undefined\n  });\n  if (!res.ok) {\n    // Attempt to parse error payload\n    let details;\n    try {\n      details = await res.json();\n    } catch (err) {\n      // swallow JSON parse errors from error payloads\n      void err;\n    }\n    const hasMessage = o => typeof o === \'object\' && o !== null && typeof o.message === \'string\';\n    throw {\n      status: res.status,\n      message: hasMessage(details) ? details.message : res.statusText || \'Request failed\',\n      details\n    };\n  }\n  return parseJson(res);\n};\nconst api = {\n  get: (path, options) => request(\'GET\', path, options),\n  post: (path, body, options) => request(\'POST\', path, {\n    ...options,\n    body\n  })\n};\n\n// Zod helpers\nconst parseWith = (schema, data) => {\n  const result = schema.safeParse(data);\n  if (!result.success) {\n    // Throw a normalized error for upstream handling\n    throw {\n      status: 500,\n      message: \'Response validation failed\',\n      details: result.error.flatten()\n    };\n  }\n  return result.data;\n};\n;// ./src/services/insightsService.ts\n\n\nconst insightSchema = external/* object */.Ikc({\n  id: external/* string */.YjP(),\n  headline: external/* string */.YjP(),\n  impact: external/* enum */.k5n([\'positive\', \'neutral\', \'negative\']),\n  delta: external/* number */.aig(),\n  updatedAt: external/* string */.YjP()\n});\nconst mockInsights = [{\n  id: \'cashflow\',\n  headline: \'Cash flow runway extended by 5.4 months\',\n  impact: \'positive\',\n  delta: 5.4,\n  updatedAt: new Date().toISOString()\n}, {\n  id: \'spend\',\n  headline: \'Marketing spend efficiency improved 12%\',\n  impact: \'positive\',\n  delta: 12,\n  updatedAt: new Date().toISOString()\n}, {\n  id: \'risk\',\n  headline: \'Transaction risk alerts down 32% week-over-week\',\n  impact: \'positive\',\n  delta: -32,\n  updatedAt: new Date().toISOString()\n}];\nconst fetchFinancialInsights = async () => {\n  // If API is configured, hit the endpoint; otherwise use local mock\n  if (isApiConfigured) {\n    const data = await api.get(\'/insights\');\n    return parseWith(external/* array */.YOg(insightSchema), data);\n  }\n  await new Promise(resolve => setTimeout(resolve, 420));\n  return mockInsights.map(insight => ({\n    ...insight,\n    updatedAt: new Date().toISOString()\n  }));\n};\n// EXTERNAL MODULE: ./src/utils/debug.tsx\nvar debug = __webpack_require__(1262);\n// EXTERNAL MODULE: ./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(6070);\n;// ./src/components/InsightsSection.tsx\n\n\n\n\n\n\nconst InsightsSection = () => {\n  const {\n    log\n  } = (0,debug/* useDebug */.L)();\n  const {\n    data,\n    isLoading,\n    isError\n  } = (0,useQuery/* useQuery */.I)({\n    queryKey: [\'insights\'],\n    queryFn: fetchFinancialInsights,\n    refetchInterval:  false ? 0 : 15_000,\n    staleTime: 10_000\n  });\n  if (isLoading) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)("section", {\n      id: "insights",\n      className: "mx-auto max-w-[1200px] px-6 py-14",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "grid place-items-center rounded-[18px] border border-cyan-400/30 bg-slate-900/60 px-6 py-12",\n        children: "Loading personalised insights\\u2026"\n      })\n    });\n  }\n  if (isError || !data) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)("section", {\n      id: "insights",\n      className: "mx-auto max-w-[1200px] px-6 py-14",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: "grid place-items-center rounded-[18px] border border-cyan-400/30 bg-slate-900/60 px-6 py-12",\n        children: "We could not fetch insights right now. Please retry shortly."\n      })\n    });\n  }\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("section", {\n    id: "insights",\n    className: "mx-auto max-w-[1200px] px-6 py-14",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)("header", {\n      className: "mb-6 space-y-2",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n        className: "text-sm uppercase tracking-[0.35em] text-cyan-200",\n        children: "Insights"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(proxy.m.h2, {\n        ...(0,motion_presets/* motionHoverProps */.N)(2, 1.005),\n        className: "text-3xl font-bold text-white transition hover:-translate-y-0.5 hover:z-10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400/40",\n        children: "Act on what matters"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n        className: "text-slate-300 max-w-2xl",\n        children: "Smart insights show what\\u2019s changing and what to do next\\u2014so you can move first with confidence."\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: "grid gap-5 md:grid-cols-3",\n      children: data.map((insight, index) => /*#__PURE__*/(0,jsx_runtime.jsxs)(proxy.m.article, {\n        ...(0,motion_presets/* motionHoverProps */.N)(6, 1.02),\n        initial: {\n          opacity: 0,\n          y: 24\n        },\n        whileInView: {\n          opacity: 1,\n          y: 0\n        },\n        viewport: {\n          once: true,\n          amount: 0.4\n        },\n        transition: {\n          delay: index * 0.1,\n          duration: 0.4\n        },\n        className: "group rounded-[18px] p-6 bg-slate-900/80 border border-cyan-400/25 shadow-[0_20px_45px_rgba(15,23,42,0.45)] nv-card-hover",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)("p", {\n          className: "text-sm font-semibold uppercase tracking-wide text-sky-300 transition transform group-hover:-translate-y-0.5 group-hover:scale-105",\n          children: insight.id\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(proxy.m.h3, {\n          ...(0,motion_presets/* motionHoverProps */.N)(2, 1.005),\n          className: "mt-2 text-lg font-semibold text-white transition hover:-translate-y-0.5 hover:z-10",\n          children: insight.headline\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)("p", {\n          className: "mt-3 text-xs text-slate-400",\n          children: ["Updated ", new Date(insight.updatedAt).toLocaleTimeString(), " \\u2014 impact", \' \', /*#__PURE__*/(0,jsx_runtime.jsx)("span", {\n            className: "text-emerald-300",\n            children: insight.impact\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(proxy.m.button, {\n          type: "button",\n          ...(0,motion_presets/* motionHoverProps */.N)(3, 1.01),\n          onClick: () => log(\'Insight opened\', insight),\n          className: "mt-4 inline-flex items-center gap-2 rounded-lg bg-slate-900/50 px-3 py-2 text-xs font-semibold uppercase tracking-wide text-cyan-200 ring-1 ring-cyan-500/40 transition hover:-translate-y-0.5 hover:shadow-lg hover:z-10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400/40 active:scale-95",\n          children: "Investigate signal"\n        })]\n      }, insight.id))\n    })]\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LGdCQUFTLEVBQUMsR0FBRyxlQUN2RTVCLG1CQUFBO1lBQU1ZLFNBQVMsRUFBQyxrQkFBa0I7WUFBQUMsUUFBQSxFQUFFbkIsT0FBTyxDQUFDZDtVQUFNLENBQU8sQ0FBQztRQUFBLENBQ3pELENBQUMsZUFDSm9CLG1CQUFBLENBQUNKLE9BQUMsQ0FBQ2lDLE1BQU07VUFDUEMsSUFBSSxFQUFDLFFBQVE7VUFBQSxHQUNUakMsMENBQWdCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQztVQUM3QmtDLE9BQU8sRUFBRUEsQ0FBQSxLQUFNM0IsR0FBRyxDQUFDLGdCQUFnQixFQUFFVixPQUFPLENBQUU7VUFDOUNrQixTQUFTLEVBQUMsMFRBQTBUO1VBQUFDLFFBQUEsRUFDclU7UUFFRCxDQUFVLENBQUM7TUFBQSxHQTVCTm5CLE9BQU8sQ0FBQ2pCLEVBNkJKLENBQ1o7SUFBQyxDQUNDLENBQUM7RUFBQSxDQUNDLENBQUM7QUFFZCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmVyb3ZhdWx0Ly4vc3JjL3NlcnZpY2VzL2FwaS1jbGllbnQudHM/NjMxZCIsIndlYnBhY2s6Ly92ZXJvdmF1bHQvLi9zcmMvc2VydmljZXMvaW5zaWdodHNTZXJ2aWNlLnRzPzNiNTAiLCJ3ZWJwYWNrOi8vdmVyb3ZhdWx0Ly4vc3JjL2NvbXBvbmVudHMvSW5zaWdodHNTZWN0aW9uLnRzeD9jMWFiIl0sInNvdXJjZXNDb250ZW50IjpbIiBpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbiBcbiAvLyBSZWFzb246IENlbnRyYWxpemVkIEFQSSBjbGllbnQgdG8gc3RhbmRhcmRpemUgZXJyb3IgaGFuZGxpbmcsIHBhcnNpbmcsIGFuZCBlbnYtZHJpdmVuIGJhc2UgVVJMLlxuIC8vIEluIGRldiwgc29tZSBzZXR1cHMgbWF5IG5vdCBoYXZlIERlZmluZVBsdWdpbiBzdWJzdGl0dXRpb24geWV0LiBBdm9pZCBoYXJkIHByb2Nlc3MgcmVmZXJlbmNlcy5cbiBjb25zdCBSQVdfRU5WID1cbiAgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52ICYmIHR5cGVvZiBwcm9jZXNzLmVudi5BUElfQkFTRV9VUkwgPT09ICdzdHJpbmcnXG4gICAgPyAocHJvY2Vzcy5lbnYuQVBJX0JBU0VfVVJMIGFzIHN0cmluZylcbiAgICA6ICcnO1xuIGNvbnN0IEFQSV9CQVNFX1VSTCA9IFN0cmluZyhSQVdfRU5WKS5yZXBsYWNlKC9cXC8kLywgJycpO1xuIGV4cG9ydCBjb25zdCBpc0FwaUNvbmZpZ3VyZWQgPSBBUElfQkFTRV9VUkwubGVuZ3RoID4gMDtcblxuZXhwb3J0IHR5cGUgQXBpRXJyb3IgPSB7XG4gIHN0YXR1czogbnVtYmVyO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGRldGFpbHM/OiB1bmtub3duO1xufTtcblxuY29uc3QgcGFyc2VKc29uID0gYXN5bmMgPFQ+KHJlczogUmVzcG9uc2UpOiBQcm9taXNlPFQ+ID0+IHtcbiAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHRleHQgPyAoSlNPTi5wYXJzZSh0ZXh0KSBhcyBUKSA6ICh7fSBhcyBUKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IHtcbiAgICAgIHN0YXR1czogcmVzLnN0YXR1cyxcbiAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIEpTT04gcmVjZWl2ZWQgZnJvbSBzZXJ2ZXInLFxuICAgICAgZGV0YWlsczogdGV4dFxuICAgIH0gc2F0aXNmaWVzIEFwaUVycm9yO1xuICB9XG59O1xuXG50eXBlIFJlcXVlc3RPcHRpb25zID0ge1xuICBoZWFkZXJzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgYm9keT86IHVua25vd247XG59O1xuXG5jb25zdCByZXF1ZXN0ID0gYXN5bmMgPFQ+KFxuICBtZXRob2Q6ICdHRVQnIHwgJ1BPU1QnIHwgJ1BVVCcgfCAnUEFUQ0gnIHwgJ0RFTEVURScsXG4gIHBhdGg6IHN0cmluZyxcbiAgb3B0aW9uczogUmVxdWVzdE9wdGlvbnMgPSB7fVxuKTogUHJvbWlzZTxUPiA9PiB7XG4gIGlmICghQVBJX0JBU0VfVVJMKSB7XG4gICAgdGhyb3cge1xuICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICBtZXNzYWdlOiAnQVBJX0JBU0VfVVJMIGlzIG5vdCBjb25maWd1cmVkJ1xuICAgIH0gc2F0aXNmaWVzIEFwaUVycm9yO1xuICB9XG5cbiAgY29uc3QgdXJsID0gYCR7QVBJX0JBU0VfVVJMfSR7cGF0aC5zdGFydHNXaXRoKCcvJykgPyAnJyA6ICcvJ30ke3BhdGh9YDtcbiAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIC4uLihvcHRpb25zLmhlYWRlcnMgfHwge30pXG4gIH07XG5cbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBtZXRob2QsXG4gICAgaGVhZGVycyxcbiAgICBib2R5OiBvcHRpb25zLmJvZHkgIT09IHVuZGVmaW5lZCA/IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYm9keSkgOiB1bmRlZmluZWRcbiAgfSk7XG5cbiAgaWYgKCFyZXMub2spIHtcbiAgICAvLyBBdHRlbXB0IHRvIHBhcnNlIGVycm9yIHBheWxvYWRcbiAgICBsZXQgZGV0YWlsczogdW5rbm93bjtcbiAgICB0cnkge1xuICAgICAgZGV0YWlscyA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBzd2FsbG93IEpTT04gcGFyc2UgZXJyb3JzIGZyb20gZXJyb3IgcGF5bG9hZHNcbiAgICAgIHZvaWQgZXJyO1xuICAgIH1cbiAgICBjb25zdCBoYXNNZXNzYWdlID0gKG86IHVua25vd24pOiBvIGlzIHsgbWVzc2FnZTogc3RyaW5nIH0gPT5cbiAgICAgIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIHR5cGVvZiAobyBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikubWVzc2FnZSA9PT0gJ3N0cmluZyc7XG4gICAgdGhyb3cge1xuICAgICAgc3RhdHVzOiByZXMuc3RhdHVzLFxuICAgICAgbWVzc2FnZTogaGFzTWVzc2FnZShkZXRhaWxzKSA/IGRldGFpbHMubWVzc2FnZSA6IHJlcy5zdGF0dXNUZXh0IHx8ICdSZXF1ZXN0IGZhaWxlZCcsXG4gICAgICBkZXRhaWxzXG4gICAgfSBzYXRpc2ZpZXMgQXBpRXJyb3I7XG4gIH1cblxuICByZXR1cm4gcGFyc2VKc29uPFQ+KHJlcyk7XG59O1xuXG5leHBvcnQgY29uc3QgYXBpID0ge1xuICBnZXQ6IDxUPihwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucykgPT4gcmVxdWVzdDxUPignR0VUJywgcGF0aCwgb3B0aW9ucyksXG4gIHBvc3Q6IDxUPihwYXRoOiBzdHJpbmcsIGJvZHk/OiB1bmtub3duLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpID0+XG4gICAgcmVxdWVzdDxUPignUE9TVCcsIHBhdGgsIHsgLi4ub3B0aW9ucywgYm9keSB9KVxufTtcblxuLy8gWm9kIGhlbHBlcnNcbmV4cG9ydCBjb25zdCBwYXJzZVdpdGggPSA8VD4oc2NoZW1hOiB6LlpvZFR5cGU8VD4sIGRhdGE6IHVua25vd24pOiBUID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gc2NoZW1hLnNhZmVQYXJzZShkYXRhKTtcbiAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xuICAgIC8vIFRocm93IGEgbm9ybWFsaXplZCBlcnJvciBmb3IgdXBzdHJlYW0gaGFuZGxpbmdcbiAgICB0aHJvdyB7XG4gICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIG1lc3NhZ2U6ICdSZXNwb25zZSB2YWxpZGF0aW9uIGZhaWxlZCcsXG4gICAgICBkZXRhaWxzOiByZXN1bHQuZXJyb3IuZmxhdHRlbigpXG4gICAgfSBzYXRpc2ZpZXMgQXBpRXJyb3I7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5kYXRhO1xufTtcbiIsIiBpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbiBpbXBvcnQgeyBhcGksIHBhcnNlV2l0aCwgaXNBcGlDb25maWd1cmVkIH0gZnJvbSAnLi9hcGktY2xpZW50JztcblxuY29uc3QgaW5zaWdodFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCksXG4gIGhlYWRsaW5lOiB6LnN0cmluZygpLFxuICBpbXBhY3Q6IHouZW51bShbJ3Bvc2l0aXZlJywgJ25ldXRyYWwnLCAnbmVnYXRpdmUnXSksXG4gIGRlbHRhOiB6Lm51bWJlcigpLFxuICB1cGRhdGVkQXQ6IHouc3RyaW5nKClcbn0pO1xuXG4gZXhwb3J0IHR5cGUgSW5zaWdodCA9IHtcbiAgaWQ6IHN0cmluZztcbiAgaGVhZGxpbmU6IHN0cmluZztcbiAgaW1wYWN0OiAncG9zaXRpdmUnIHwgJ25ldXRyYWwnIHwgJ25lZ2F0aXZlJztcbiAgZGVsdGE6IG51bWJlcjtcbiAgdXBkYXRlZEF0OiBzdHJpbmc7XG59O1xuXG5jb25zdCBtb2NrSW5zaWdodHM6IEluc2lnaHRbXSA9IFtcbiAge1xuICAgIGlkOiAnY2FzaGZsb3cnLFxuICAgIGhlYWRsaW5lOiAnQ2FzaCBmbG93IHJ1bndheSBleHRlbmRlZCBieSA1LjQgbW9udGhzJyxcbiAgICBpbXBhY3Q6ICdwb3NpdGl2ZScsXG4gICAgZGVsdGE6IDUuNCxcbiAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICB9LFxuICB7XG4gICAgaWQ6ICdzcGVuZCcsXG4gICAgaGVhZGxpbmU6ICdNYXJrZXRpbmcgc3BlbmQgZWZmaWNpZW5jeSBpbXByb3ZlZCAxMiUnLFxuICAgIGltcGFjdDogJ3Bvc2l0aXZlJyxcbiAgICBkZWx0YTogMTIsXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgfSxcbiAge1xuICAgIGlkOiAncmlzaycsXG4gICAgaGVhZGxpbmU6ICdUcmFuc2FjdGlvbiByaXNrIGFsZXJ0cyBkb3duIDMyJSB3ZWVrLW92ZXItd2VlaycsXG4gICAgaW1wYWN0OiAncG9zaXRpdmUnLFxuICAgIGRlbHRhOiAtMzIsXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgfVxuXTtcblxuIGV4cG9ydCBjb25zdCBmZXRjaEZpbmFuY2lhbEluc2lnaHRzID0gYXN5bmMgKCk6IFByb21pc2U8SW5zaWdodFtdPiA9PiB7XG4gIC8vIElmIEFQSSBpcyBjb25maWd1cmVkLCBoaXQgdGhlIGVuZHBvaW50OyBvdGhlcndpc2UgdXNlIGxvY2FsIG1vY2tcbiAgaWYgKGlzQXBpQ29uZmlndXJlZCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBhcGkuZ2V0PHVua25vd24+KCcvaW5zaWdodHMnKTtcbiAgICByZXR1cm4gcGFyc2VXaXRoKHouYXJyYXkoaW5zaWdodFNjaGVtYSksIGRhdGEpO1xuICB9XG5cbiAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNDIwKSk7XG4gIHJldHVybiBtb2NrSW5zaWdodHMubWFwKChpbnNpZ2h0KSA9PiAoe1xuICAgIC4uLmluc2lnaHQsXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgfSkpO1xuIH07XG4iLCJpbXBvcnQgeyB1c2VRdWVyeSB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XG5pbXBvcnQgeyBtIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XG5pbXBvcnQgeyBtb3Rpb25Ib3ZlclByb3BzIH0gZnJvbSAnQC9kZXNpZ24tc3lzdGVtL21vdGlvbi9tb3Rpb24tcHJlc2V0cyc7XG5cbmltcG9ydCB7IGZldGNoRmluYW5jaWFsSW5zaWdodHMgfSBmcm9tICdAL3NlcnZpY2VzL2luc2lnaHRzU2VydmljZSc7XG5pbXBvcnQgeyB1c2VEZWJ1ZyB9IGZyb20gJ0AvdXRpbHMvZGVidWcnO1xuXG5leHBvcnQgY29uc3QgSW5zaWdodHNTZWN0aW9uID0gKCkgPT4ge1xuICBjb25zdCB7IGxvZyB9ID0gdXNlRGVidWcoKTtcbiAgY29uc3QgeyBkYXRhLCBpc0xvYWRpbmcsIGlzRXJyb3IgfSA9IHVzZVF1ZXJ5KHtcbiAgICBxdWVyeUtleTogWydpbnNpZ2h0cyddLFxuICAgIHF1ZXJ5Rm46IGZldGNoRmluYW5jaWFsSW5zaWdodHMsXG4gICAgcmVmZXRjaEludGVydmFsOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnID8gZmFsc2UgOiAxNV8wMDAsXG4gICAgc3RhbGVUaW1lOiAxMF8wMDBcbiAgfSk7XG5cbiAgaWYgKGlzTG9hZGluZykge1xuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBpZD1cImluc2lnaHRzXCIgY2xhc3NOYW1lPVwibXgtYXV0byBtYXgtdy1bMTIwMHB4XSBweC02IHB5LTE0XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBwbGFjZS1pdGVtcy1jZW50ZXIgcm91bmRlZC1bMThweF0gYm9yZGVyIGJvcmRlci1jeWFuLTQwMC8zMCBiZy1zbGF0ZS05MDAvNjAgcHgtNiBweS0xMlwiPlxuICAgICAgICAgIExvYWRpbmcgcGVyc29uYWxpc2VkIGluc2lnaHRz4oCmXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9zZWN0aW9uPlxuICAgICk7XG4gIH1cblxuICBpZiAoaXNFcnJvciB8fCAhZGF0YSkge1xuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBpZD1cImluc2lnaHRzXCIgY2xhc3NOYW1lPVwibXgtYXV0byBtYXgtdy1bMTIwMHB4XSBweC02IHB5LTE0XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBwbGFjZS1pdGVtcy1jZW50ZXIgcm91bmRlZC1bMThweF0gYm9yZGVyIGJvcmRlci1jeWFuLTQwMC8zMCBiZy1zbGF0ZS05MDAvNjAgcHgtNiBweS0xMlwiPlxuICAgICAgICAgIFdlIGNvdWxkIG5vdCBmZXRjaCBpbnNpZ2h0cyByaWdodCBub3cuIFBsZWFzZSByZXRyeSBzaG9ydGx5LlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbiBpZD1cImluc2lnaHRzXCIgY2xhc3NOYW1lPVwibXgtYXV0byBtYXgtdy1bMTIwMHB4XSBweC02IHB5LTE0XCI+XG4gICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cIm1iLTYgc3BhY2UteS0yXCI+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdXBwZXJjYXNlIHRyYWNraW5nLVswLjM1ZW1dIHRleHQtY3lhbi0yMDBcIj5JbnNpZ2h0czwvcD5cbiAgICAgICAgPG0uaDJcbiAgICAgICAgICB7Li4ubW90aW9uSG92ZXJQcm9wcygyLCAxLjAwNSl9XG4gICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC0zeGwgZm9udC1ib2xkIHRleHQtd2hpdGUgdHJhbnNpdGlvbiBob3ZlcjotdHJhbnNsYXRlLXktMC41IGhvdmVyOnotMTAgZm9jdXMtdmlzaWJsZTpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nLTIgZm9jdXMtdmlzaWJsZTpyaW5nLWN5YW4tNDAwLzQwXCJcbiAgICAgICAgPlxuICAgICAgICAgIEFjdCBvbiB3aGF0IG1hdHRlcnNcbiAgICAgICAgPC9tLmgyPlxuICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNsYXRlLTMwMCBtYXgtdy0yeGxcIj5cbiAgICAgICAgICBTbWFydCBpbnNpZ2h0cyBzaG93IHdoYXTigJlzIGNoYW5naW5nIGFuZCB3aGF0IHRvIGRvIG5leHTigJRzbyB5b3UgY2FuIG1vdmUgZmlyc3Qgd2l0aCBjb25maWRlbmNlLlxuICAgICAgICA8L3A+XG4gICAgICA8L2hlYWRlcj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBnYXAtNSBtZDpncmlkLWNvbHMtM1wiPlxuICAgICAgICB7ZGF0YS5tYXAoKGluc2lnaHQsIGluZGV4KSA9PiAoXG4gICAgICAgICAgPG0uYXJ0aWNsZVxuICAgICAgICAgICAga2V5PXtpbnNpZ2h0LmlkfVxuICAgICAgICAgICAgey4uLm1vdGlvbkhvdmVyUHJvcHMoNiwgMS4wMil9XG4gICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDI0IH19XG4gICAgICAgICAgICB3aGlsZUluVmlldz17eyBvcGFjaXR5OiAxLCB5OiAwIH19XG4gICAgICAgICAgICB2aWV3cG9ydD17eyBvbmNlOiB0cnVlLCBhbW91bnQ6IDAuNCB9fVxuICAgICAgICAgICAgdHJhbnNpdGlvbj17eyBkZWxheTogaW5kZXggKiAwLjEsIGR1cmF0aW9uOiAwLjQgfX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImdyb3VwIHJvdW5kZWQtWzE4cHhdIHAtNiBiZy1zbGF0ZS05MDAvODAgYm9yZGVyIGJvcmRlci1jeWFuLTQwMC8yNSBzaGFkb3ctWzBfMjBweF80NXB4X3JnYmEoMTUsMjMsNDIsMC40NSldIG52LWNhcmQtaG92ZXJcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1zZW1pYm9sZCB1cHBlcmNhc2UgdHJhY2tpbmctd2lkZSB0ZXh0LXNreS0zMDAgdHJhbnNpdGlvbiB0cmFuc2Zvcm0gZ3JvdXAtaG92ZXI6LXRyYW5zbGF0ZS15LTAuNSBncm91cC1ob3ZlcjpzY2FsZS0xMDVcIj5cbiAgICAgICAgICAgICAge2luc2lnaHQuaWR9XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8bS5oM1xuICAgICAgICAgICAgICB7Li4ubW90aW9uSG92ZXJQcm9wcygyLCAxLjAwNSl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm10LTIgdGV4dC1sZyBmb250LXNlbWlib2xkIHRleHQtd2hpdGUgdHJhbnNpdGlvbiBob3ZlcjotdHJhbnNsYXRlLXktMC41IGhvdmVyOnotMTBcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7aW5zaWdodC5oZWFkbGluZX1cbiAgICAgICAgICAgIDwvbS5oMz5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm10LTMgdGV4dC14cyB0ZXh0LXNsYXRlLTQwMFwiPlxuICAgICAgICAgICAgICBVcGRhdGVkIHtuZXcgRGF0ZShpbnNpZ2h0LnVwZGF0ZWRBdCkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9IOKAlCBpbXBhY3R7JyAnfVxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWVtZXJhbGQtMzAwXCI+e2luc2lnaHQuaW1wYWN0fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxtLmJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgey4uLm1vdGlvbkhvdmVyUHJvcHMoMywgMS4wMSl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGxvZygnSW5zaWdodCBvcGVuZWQnLCBpbnNpZ2h0KX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibXQtNCBpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTIgcm91bmRlZC1sZyBiZy1zbGF0ZS05MDAvNTAgcHgtMyBweS0yIHRleHQteHMgZm9udC1zZW1pYm9sZCB1cHBlcmNhc2UgdHJhY2tpbmctd2lkZSB0ZXh0LWN5YW4tMjAwIHJpbmctMSByaW5nLWN5YW4tNTAwLzQwIHRyYW5zaXRpb24gaG92ZXI6LXRyYW5zbGF0ZS15LTAuNSBob3ZlcjpzaGFkb3ctbGcgaG92ZXI6ei0xMCBmb2N1cy12aXNpYmxlOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmctMiBmb2N1cy12aXNpYmxlOnJpbmctY3lhbi00MDAvNDAgYWN0aXZlOnNjYWxlLTk1XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgSW52ZXN0aWdhdGUgc2lnbmFsXG4gICAgICAgICAgICA8L20uYnV0dG9uPlxuICAgICAgICAgIDwvbS5hcnRpY2xlPlxuICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvc2VjdGlvbj5cbiAgKTtcbn1cblxuIl0sIm5hbWVzIjpbIlJBV19FTlYiLCJwcm9jZXNzIiwiZW52IiwiQVBJX0JBU0VfVVJMIiwiU3RyaW5nIiwicmVwbGFjZSIsImlzQXBpQ29uZmlndXJlZCIsImxlbmd0aCIsInBhcnNlSnNvbiIsInJlcyIsInRleHQiLCJKU09OIiwicGFyc2UiLCJlIiwic3RhdHVzIiwibWVzc2FnZSIsImRldGFpbHMiLCJyZXF1ZXN0IiwibWV0aG9kIiwicGF0aCIsIm9wdGlvbnMiLCJ1cmwiLCJzdGFydHNXaXRoIiwiaGVhZGVycyIsImZldGNoIiwiYm9keSIsInVuZGVmaW5lZCIsInN0cmluZ2lmeSIsIm9rIiwianNvbiIsImVyciIsImhhc01lc3NhZ2UiLCJvIiwic3RhdHVzVGV4dCIsImFwaSIsImdldCIsInBvc3QiLCJwYXJzZVdpdGgiLCJzY2hlbWEiLCJkYXRhIiwicmVzdWx0Iiwic2FmZVBhcnNlIiwic3VjY2VzcyIsImVycm9yIiwiZmxhdHRlbiIsInoiLCJpbnNpZ2h0U2NoZW1hIiwib2JqZWN0IiwiaWQiLCJzdHJpbmciLCJoZWFkbGluZSIsImltcGFjdCIsImVudW0iLCJkZWx0YSIsIm51bWJlciIsInVwZGF0ZWRBdCIsIm1vY2tJbnNpZ2h0cyIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImZldGNoRmluYW5jaWFsSW5zaWdodHMiLCJhcnJheSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIm1hcCIsImluc2lnaHQiLCJ1c2VRdWVyeSIsIm0iLCJtb3Rpb25Ib3ZlclByb3BzIiwidXNlRGVidWciLCJqc3giLCJfanN4IiwianN4cyIsIl9qc3hzIiwiSW5zaWdodHNTZWN0aW9uIiwibG9nIiwiaXNMb2FkaW5nIiwiaXNFcnJvciIsInF1ZXJ5S2V5IiwicXVlcnlGbiIsInJlZmV0Y2hJbnRlcnZhbCIsIk5PREVfRU5WIiwic3RhbGVUaW1lIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJoMiIsImluZGV4IiwiYXJ0aWNsZSIsImluaXRpYWwiLCJvcGFjaXR5IiwieSIsIndoaWxlSW5WaWV3Iiwidmlld3BvcnQiLCJvbmNlIiwiYW1vdW50IiwidHJhbnNpdGlvbiIsImRlbGF5IiwiZHVyYXRpb24iLCJoMyIsInRvTG9jYWxlVGltZVN0cmluZyIsImJ1dHRvbiIsInR5cGUiLCJvbkNsaWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7252\n\n}')}}]);